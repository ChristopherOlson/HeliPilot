#!/bin/bash
# script to run the HeliPilot simulator (SITL)
# created by Chris Olson for HeliPilot

function draw_logo() {
    clear
    echo -e "\e[1;34m 0  0  0000  0     0 \e[0m\e[1;31m  0 0   0  0      000   0000000 \e[0m"
    echo -e "\e[1;34m 0  0  0     0     0 \e[0m\e[1;31m  0  0  0  0     0   0     0 \e[0m"
    echo -e "\e[1;34m 0000  000   0     0 \e[0m\e[1;31m  0 0   0  0    0     0    0 \e[0m"
    echo -e "\e[1;34m 0  0  0     0     0 \e[0m\e[1;31m  0     0  0     0   0     0 \e[0m"
    echo -e "\e[1;34m 0  0  0000  0000  0 \e[0m\e[1;31m  0     0  0000   000      0 \e[0m"
    echo -e "\e[1;34m----------------------\e[0m\e[1;31m--------------------------- \e[0m"
    echo "starting up the simulator.................."
    echo ""
}

# check that user locations.txt exists
draw_logo
if [ ! -e ~/.config/helipilot/locations.txt ]; then
    # we try to create a .config folder for WSL on Windows
    mkdir -m 755 ~/.config
    mkdir -m 755 ~/.config/helipilot && (umask 133 ; touch ~/.config/helipilot/locations.txt)
    echo "adding user locations.txt file..........."
    echo "#NAME=latitude,longitude,absolute-altitude,heading" >> ~/.config/helipilot/locations.txt
    echo "Default=45.4175714,-91.7720328,334,282" >> ~/.config/helipilot/locations.txt
else
    echo "user locations exists!"
    echo ""
    echo "TO QUIT THE SIMULATOR AT ANY TIME press Ctl-C"
    echo ""
fi

# check that HeliPilot repo exists
if [ ! -e ~/github/HeliPilot/sim ]; then
    if [ ! -e ~/.config/helipilot/helipilot_path.txt ]; then
        echo ""
        echo -e "\e[1;31m The HeliPilot code repo was not found........... \e[0m"
        echo ""
        echo "Please run HeliPilot Setup to fix this. You can obtain the HeliPilot Setup"
        echo "program by downloading it from github at"
        echo "https://github.com/MidwestAire/HeliPilot/releases/tag/v21-beta"
        echo ""
        read -p "Program will not run - press Ctl-C to exit" die
    else
        helipilot_path=$( cat ~/.config/helipilot/helipilot_path.txt )
    fi
else
    helipilot_path="github/HeliPilot"
fi

ASSUME_YES=false
function maybe_prompt_user() {
    if $ASSUME_YES; then
        return 1
    else
        read -p "$1"
        if [[ $REPLY =~ ^[Nn]$ ]]; then
            return 1
        else
            return 0
        fi
    fi
}

echo "###############################################################"
cat ~/.config/helipilot/locations.txt
echo "###############################################################"
echo "Enter the location name of your flight. Must exist in your stored locations listed above"
echo "Otherwise you can enter in a new location before we start the sim by leaving this blank"
read -p "Location :" location
draw_logo
if maybe_prompt_user "Dislay MavProxy console and map? This is optional [n/Y]" ; then
    console="--console"
    map="--map"
fi

draw_logo
branch="master"
echo ""
echo "The SIM will run on $branch by default. Enter a different branch to run the"
echo "sim, i.e. HeliPilot-v20, HeliPilot-v19 or another custom branch"
echo ""
read -p "Branch : " new_branch
if [ "$new_branch" == "HeliPilot-v20" ]; then
    vehicle_type="ArduCopter"
    cd ~/$helipilot_path
    git checkout $new_branch
    git submodule update --init --recursive
elif [ "$new_branch" == "HeliPilot-v19" ]; then
    vehicle_type="ArduCopter"
    cd ~/$helipilot_path
    git checkout $new_branch
    git submodule update --init --recursive
elif [ "$new_branch" != "$branch" ]; then
    vehicle_type="Helicopter"
    cd ~/$helipilot_path
    git checkout $branch
    git submodule update --init --recursive
else
    vehicle_type="Helicopter"
    cd ~/$helipilot_path
    git checkout $branch
    git submodule update --init --recursive
    echo ""
fi
    
echo "The SIM will run on $branch"
    
# for compatibility with V20 and v19 branches we create an ardupilot directory
mkdir ~/.config/ardupilot
# then we create a symlink to locations.txt
ln -s ~/.config/helipilot/locations.txt ~/.config/ardupilot/locations.txt

draw_logo
echo ""
echo "Add IP addresses to run the SIM on HeliPilot-QGC on a remote device(s) such as a tablet?"
echo "Enter IP's separated by a space such as 192.168.0.1 192.168.0.2 - you can enter up to 8 IP addresses"
echo "If just running on localhost leave this blank"
echo ""
read -p "IP Address of remote device(s) : " address1 address2 address3 address4 address5 address6 address7 address8

draw_logo
if [ -z "$location" ] ; then
    if maybe_prompt_user "Enter a new location for this SIM flight [n/Y]?" ; then
        echo ""
        echo "enter what you wish to call this location"
        echo "Example: Barron"
        echo ""
        read -p 'Location: ' new_location
        echo ""
        echo "enter the details for $new_location seperated by commas with no spaces in the format:"
        echo "latitude,longitude,altitude,initial-heading"
        echo ""
        echo "Example: 45.4175714,-91.7720328,334,270 (NOTE: altitude is MSL in meters)"
        echo ""
        read -p 'Details: ' details
        echo "$new_location=$details" >> ~/.config/helipilot/locations.txt
        sim_location="$new_location"
    else
        sim_location="Default"
    fi
else
    sim_location="$location"
fi

if [ -z "$address1" ] ; then
    Tools/autotest/sim_vehicle.py $console $map -v $vehicle_type -f heli -L $sim_location
elif [ -z "$address2" ] ; then
    Tools/autotest/sim_vehicle.py $console $map -v $vehicle_type -f heli -L $sim_location --out $address1:14550
elif [ -z "$address3" ] ; then
    Tools/autotest/sim_vehicle.py $console $map -v $vehicle_type -f heli -L $sim_location --out $address1:14550 --out $address2:14550
elif [ -z "$address4" ] ; then
    Tools/autotest/sim_vehicle.py $console $map -v $vehicle_type -f heli -L $sim_location --out $address1:14550 --out $address2:14550 --out $address3:14550
elif [ -z "$address5" ] ; then
    Tools/autotest/sim_vehicle.py $console $map -v $vehicle_type -f heli -L $sim_location --out $address1:14550 --out $address2:14550 --out $address3:14550 --out $address4:14550
elif [ -z "$address6" ] ; then
    Tools/autotest/sim_vehicle.py $console $map -v $vehicle_type -f heli -L $sim_location --out $address1:14550 --out $address2:14550 --out $address3:14550 --out $address4:14550 --out $address5:14550
elif [ -z "$address7" ] ; then
    Tools/autotest/sim_vehicle.py $console $map -v $vehicle_type -f heli -L $sim_location --out $address1:14550 --out $address2:14550 --out $address3:14550 --out $address4:14550 --out $address5:14550 --out $address6:14550
elif [ -z "$address8" ] ; then
    Tools/autotest/sim_vehicle.py $console $map -v $vehicle_type -f heli -L $sim_location --out $address1:14550 --out $address2:14550 --out $address3:14550 --out $address4:14550 --out $address5:14550 --out $address6:14550 --out $address7:14550
else
    Tools/autotest/sim_vehicle.py $console $map -v $vehicle_type -f heli -L $sim_location --out $address1:14550 --out $address2:14550 --out $address3:14550 --out $address4:14550 --out $address5:14550 --out $address6:14550 --out $address7:14550 --out $address8:14550
fi
